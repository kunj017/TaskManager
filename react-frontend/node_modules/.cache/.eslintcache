[{"/Users/kunjtaneja/VSCodeProjects/helloworld/taskManager/react-frontend/src/index.js":"1","/Users/kunjtaneja/VSCodeProjects/helloworld/taskManager/react-frontend/src/reportWebVitals.js":"2","/Users/kunjtaneja/VSCodeProjects/helloworld/taskManager/react-frontend/src/App.js":"3","/Users/kunjtaneja/VSCodeProjects/helloworld/taskManager/react-frontend/src/components/Header.js":"4"},{"size":535,"mtime":1678278322228,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1678278322228,"results":"7","hashOfConfig":"6"},{"size":255,"mtime":1688111551945,"results":"8","hashOfConfig":"6"},{"size":10016,"mtime":1678456301752,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"mx4rac",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"/Users/kunjtaneja/VSCodeProjects/helloworld/taskManager/react-frontend/src/index.js",[],[],"/Users/kunjtaneja/VSCodeProjects/helloworld/taskManager/react-frontend/src/reportWebVitals.js",[],[],"/Users/kunjtaneja/VSCodeProjects/helloworld/taskManager/react-frontend/src/App.js",["23","24"],[],"/Users/kunjtaneja/VSCodeProjects/helloworld/taskManager/react-frontend/src/components/Header.js",["25","26","27","28","29","30","31"],[],"import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n// import \"./Header.css\";\nimport {\n  Stack,\n  Button,\n  AppBar,\n  Toolbar,\n  IconButton,\n  Typography,\n  Card,\n  CardActions,\n  Box,\n  CardContent,\n  CardHeader,\n  Grid,\n  TextField,\n  InputAdornment,\n  Fab,\n  Checkbox,\n  Divider,\n} from \"@mui/material\";\nimport { ThemeProvider, createTheme } from \"@mui/material/styles\";\nimport TaskAltIcon from \"@mui/icons-material/TaskAlt\";\nimport TaskIcon from \"@mui/icons-material/Task\";\nimport AddTaskIcon from \"@mui/icons-material/AddTask\";\nimport CheckCircleOutlineIcon from \"@mui/icons-material/CheckCircleOutline\";\nimport CheckCircleIcon from \"@mui/icons-material/CheckCircle\";\nimport DeleteForeverOutlinedIcon from \"@mui/icons-material/DeleteForeverOutlined\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport RadioButtonUncheckedIcon from \"@mui/icons-material/RadioButtonUnchecked\";\n\nfunction Header() {\n  const [taskList, setTaskList] = useState([]);\n  const [taskTitle, setTaskTitle] = useState(\"\");\n  const [check, setCheck] = useState(0);\n  const [updateItem, setUpdateItem] = useState(null);\n\n  const createPostRequest = () => {\n    const post = { title: taskTitle };\n    axios\n      .post(\"http://localhost:4000\", post)\n      .then((res) => {\n        console.log(`create response ${res}`);\n        getFreshTasksRequest();\n        setTaskTitle(\"\");\n      })\n      .catch((err) => {\n        console.log(`Create error ${err}`);\n      });\n  };\n\n  const deleteTaskRequest = (_id) => {\n    axios\n      .delete(`http://localhost:4000/${_id}`)\n      .then((res) => {\n        console.log(`delete response ${res}`);\n        getFreshTasksRequest();\n      })\n      .catch((err) => {\n        console.log(`Delete error ${err}`);\n      });\n  };\n\n  const updateTaskRequest = (updatedItem) => {\n    axios\n      .patch(`http://localhost:4000/${updatedItem._id}`, {\n        title: updatedItem.title,\n        completed: updatedItem.completed,\n      })\n      .then((res) => {\n        console.log(`update response ${res}`);\n        getFreshTasksRequest();\n      })\n      .catch((err) => {\n        console.log(`update error ${err}`);\n      });\n  };\n\n  const getFreshTasksRequest = () => {\n    console.log(\"Fresh data called\");\n    axios\n      .get(\"http://localhost:4000\")\n      .then((res) => {\n        console.log(res.data.tasks);\n        setTaskList((prevTaksList) => {\n          return res.data.tasks;\n        });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const updateTaskTitle = (item) => {\n    setUpdateItem(item);\n  };\n\n  const colorTheme = createTheme({\n    palette: {\n      mode: \"dark\",\n      primary: {\n        main: \"#073a6d\",\n      },\n    },\n  });\n\n  const navBarComponent = (\n    <ThemeProvider theme={colorTheme}>\n      <AppBar position=\"static\" enableColorOnDark>\n        <Toolbar>\n          <IconButton size=\"large\" edge=\"start\" color=\"inherit\">\n            <TaskAltIcon></TaskAltIcon>\n          </IconButton>\n          <Typography\n            variant=\"h6\"\n            component=\"div\"\n            sx={{ flexGrow: 1, textAlign: \"left\" }}\n          >\n            Task Manager\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </ThemeProvider>\n  );\n\n  const taskComponent = (item) => {\n    return (\n      <Stack\n        direction=\"row\"\n        alignItems=\"center\"\n        // sx={{\n        //   ...(item.completed && { border: \"1px solid green\" }),\n        //   ...(!item.completed && { border: \"1px solid red\" }),\n        // }}\n        height={65}\n        sx={{\n          ...(item.completed && { background: \"#aef1cd\" }),\n          ...(!item.completed && { background: \"#e69f8b\" }),\n          ...(item.completed && { border: \"1px solid green\" }),\n          ...(!item.completed && { border: \"1px solid red\" }),\n        }}\n      >\n        <Checkbox\n          icon={<RadioButtonUncheckedIcon />}\n          checkedIcon={<CheckCircleIcon />}\n          checked={item.completed}\n          onChange={(e) => {\n            updateTaskRequest({\n              _id: item._id,\n              title: item.title,\n              completed: e.target.checked,\n            });\n          }}\n        ></Checkbox>\n        <Typography\n          variant=\"body1\"\n          sx={{\n            flexGrow: 1,\n            textAlign: \"left\",\n            ...(item.completed && { textDecoration: \"line-through\" }),\n          }}\n        >\n          {item.title}\n        </Typography>\n        <IconButton\n          onClick={() => {\n            updateTaskTitle(item);\n          }}\n        >\n          <EditIcon />\n        </IconButton>\n        <IconButton\n          onClick={() => {\n            deleteTaskRequest(item._id);\n          }}\n        >\n          <DeleteForeverOutlinedIcon />\n        </IconButton>\n      </Stack>\n    );\n  };\n\n  const cardHeader = (title, InputTaskIcon) => {\n    return (\n      <CardHeader\n        avatar={InputTaskIcon}\n        title={title}\n        disableTypography={false}\n        titleTypographyProps={{ variant: \"h4\", color: \"white\" }}\n        sx={{\n          textAlign: \"left\",\n          //   backgroundColor: \"#1976d2\",\n          // backgroundColor: \"#8833efdf\",\n          backgroundColor: \"#1976d2\",\n        }}\n      ></CardHeader>\n    );\n  };\n\n  const addTaskComponent = () => {\n    return (\n      <CardContent>\n        <Stack direction=\"row\">\n          <TextField\n            variant=\"outlined\"\n            label=\"Add Task\"\n            onChange={(e) => {\n              setTaskTitle(e.target.value);\n            }}\n            onKeyDown={(ev) => {\n              console.log(`Pressed keyCode ${ev.key}`);\n              if (ev.key === \"Enter\") {\n                // Do code here\n                createPostRequest();\n                ev.preventDefault();\n              }\n            }}\n            value={taskTitle}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <TaskIcon />\n                </InputAdornment>\n              ),\n            }}\n            sx={{ flexGrow: 1 }}\n          ></TextField>\n          <Fab\n            color=\"primary\"\n            aria-label=\"add\"\n            sx={{ ml: 2 }}\n            onClick={() => {\n              createPostRequest();\n            }}\n          >\n            <AddTaskIcon></AddTaskIcon>\n          </Fab>\n        </Stack>\n      </CardContent>\n    );\n  };\n\n  const updateItemRequest = () => {\n    updateTaskRequest(updateItem);\n    setUpdateItem(null);\n  };\n\n  const updateTaskComponent = () => {\n    return (\n      <CardContent>\n        <Stack direction=\"row\">\n          <TextField\n            variant=\"outlined\"\n            label=\"Update Task\"\n            onChange={(e) => {\n              setUpdateItem({ ...updateItem, title: e.target.value });\n            }}\n            onKeyDown={(ev) => {\n              console.log(`Pressed keyCode ${ev.key}`);\n              if (ev.key === \"Enter\") {\n                // Do code here\n                updateItemRequest();\n                ev.preventDefault();\n              }\n            }}\n            value={updateItem.title}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <TaskIcon />\n                </InputAdornment>\n              ),\n            }}\n            sx={{ flexGrow: 1 }}\n          ></TextField>\n          <Fab\n            color=\"primary\"\n            aria-label=\"add\"\n            sx={{ ml: 2 }}\n            onClick={() => {\n              updateItemRequest();\n            }}\n          >\n            <AddTaskIcon></AddTaskIcon>\n          </Fab>\n        </Stack>\n      </CardContent>\n    );\n  };\n\n  useEffect(() => {\n    getFreshTasksRequest();\n  }, []);\n\n  const addTaskCard = () => {\n    return (\n      <Card\n        raised={true}\n        sx={{\n          width: 500,\n          display: \"flex\",\n          flexDirection: \"column\",\n        }}\n      >\n        {/* Card Header */}\n        {cardHeader(\n          \"Create New Task\",\n          <TaskAltIcon style={{ color: \"white\" }}></TaskAltIcon>\n        )}\n\n        {/* Add Task field */}\n        {addTaskComponent()}\n      </Card>\n    );\n  };\n\n  const updateTaskCard = () => {\n    return (\n      <Card\n        raised={true}\n        sx={{\n          width: 500,\n          display: \"flex\",\n          flexDirection: \"column\",\n        }}\n      >\n        {/* Card Header */}\n        {cardHeader(\n          \"Update Task\",\n          <TaskAltIcon style={{ color: \"white\" }}></TaskAltIcon>\n        )}\n\n        {/* Add Task field */}\n        {updateTaskComponent()}\n      </Card>\n    );\n  };\n\n  return (\n    <>\n      {/* Navbar Component */}\n      {navBarComponent}\n\n      <Grid container direction=\"column\" sx={{ alignItems: \"center\", my: 7 }}>\n        <Grid item sx={{ display: \"flex\", flexDirection: \"column\" }}>\n          {updateItem != null ? updateTaskCard() : addTaskCard()}\n        </Grid>\n        <Grid item>\n          <Card\n            raised={true}\n            sx={{\n              width: 900,\n              display: \"flex\",\n              flexDirection: \"column\",\n              my: 10,\n            }}\n          >\n            {/* Card Header */}\n            {cardHeader(\n              \"Your Tasks\",\n              <TaskIcon style={{ color: \"white\" }}></TaskIcon>\n            )}\n\n            {/* Task list render */}\n            <CardContent>\n              {taskList.map((item) => {\n                return taskComponent(item);\n              })}\n              {/* <Stack\n                direction=\"column\"\n                spacing={2}\n                divider={\n                  <Divider\n                    variant=\"fullWidth\"\n                    flexItem\n                    orientation=\"horizontal\"\n                  ></Divider>\n                }\n                sx={{ my: 2, border: \"1px black\" }}\n              >\n                {taskList.map((item) => {\n                  return taskComponent(item);\n                })}\n              </Stack> */}\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n\nexport default Header;\n",{"ruleId":"32","severity":1,"message":"33","line":5,"column":10,"nodeType":"34","messageId":"35","endLine":5,"endColumn":15},{"ruleId":"32","severity":1,"message":"36","line":5,"column":17,"nodeType":"34","messageId":"35","endLine":5,"endColumn":25},{"ruleId":"32","severity":1,"message":"37","line":6,"column":3,"nodeType":"34","messageId":"35","endLine":6,"endColumn":9},{"ruleId":"32","severity":1,"message":"38","line":12,"column":3,"nodeType":"34","messageId":"35","endLine":12,"endColumn":14},{"ruleId":"32","severity":1,"message":"39","line":13,"column":3,"nodeType":"34","messageId":"35","endLine":13,"endColumn":6},{"ruleId":"32","severity":1,"message":"40","line":21,"column":3,"nodeType":"34","messageId":"35","endLine":21,"endColumn":10},{"ruleId":"32","severity":1,"message":"41","line":27,"column":8,"nodeType":"34","messageId":"35","endLine":27,"endColumn":30},{"ruleId":"32","severity":1,"message":"42","line":36,"column":10,"nodeType":"34","messageId":"35","endLine":36,"endColumn":15},{"ruleId":"32","severity":1,"message":"43","line":36,"column":17,"nodeType":"34","messageId":"35","endLine":36,"endColumn":25},"no-unused-vars","'tasks' is assigned a value but never used.","Identifier","unusedVar","'setTasks' is assigned a value but never used.","'Button' is defined but never used.","'CardActions' is defined but never used.","'Box' is defined but never used.","'Divider' is defined but never used.","'CheckCircleOutlineIcon' is defined but never used.","'check' is assigned a value but never used.","'setCheck' is assigned a value but never used."]